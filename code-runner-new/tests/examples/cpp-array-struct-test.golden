rm cpp-array-struct-test.vgtrace
var trace = {
  "code": "// From the test suite of https://github.com/codespecs/daikon\n//   daikon/tests/kvasir-tests/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Tests the following things:\n// arrays, arrays within structs, global arrays, multi-dimensional arrays, typedef\n\nstruct _buffers {\n  int age;\n  char middleName[15];\n  double weight; // This DOESN'T DISPLAY properly for populationPtr->weight, but change it to float and it'll all work fine\n  char* mallocMePlease;\n  char lastName[50];\n  unsigned long SS;\n  char firstName[10];\n};\n\ntypedef struct _buffers buffer;\n\ntypedef struct {\n  int social_security[9];\n  int MIT_id[9];\n  int birthday[3];\n} array_struct;\n\nbuffer population[5] = {{51, \"world1\", 6.1, 0, \"baby1\", 71, \"hello1\"},\n      {52, \"world2\", 6.2, 0, \"baby2\", 72, \"hello2\"},\n      {53, \"world3\", 6.3, 0, \"baby3\", 73, \"hello3\"},\n      {54, \"world4\", 6.4, 0, \"baby4\", 74, \"hello4\"},\n      {55, \"world5\", 6.5, 0, \"baby5\", 75, \"hello5\"}};\n\nint globalInt;\nstatic int* globalIntPtr;\n\nbuffer* populationPtr;\n\nint basicIntArray[10] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n\nint multiDimensional[4][5][12];\n\nstatic array_struct abracadabra = {{1, 1, 2, 3, 5, 8, 13, 21, 35},\n           {5, 4, 6, 3, 7, 2, 8, 1, 9},\n           {1983, 10, 30}};\n\n// Time to get tricky\ntypedef struct {\n  int foo_head;\n  struct {\n    int bar_head;\n    struct {\n      int baz_head;\n      int y;\n      int baz_tail;\n    } C;\n    int bar_tail;\n    struct {\n      int neverSeeMe;\n    } D[3];\n  } B[3];\n  int foo_tail;\n} A;\n\nA eightA[8] = { {1, {{20, {300, 4000, 50000}, 600000, {{1}, {1}, {1}}}, {-4, {-6, -8, -10}, -12, {{1}, {1}, {1}}}, {6, {9, 12, 15}, 18, {{1}, {1}, {1}}}}, 7},\n    {11,{{22, {33, 44, 55}, 66}, {44, {66, 88, 100}, 1200}, {66, {99, 1200, 1500}, 1800}}, 77},\n    {111,{{222, {333, 444, 555}, 666}, {44, {66, 888, 1000}, 12000}, {666, {999, 12000, 15000}, 18000}}, 777},\n    {1111,{{2222, {3333, 4444, 5555}, 6666}, {44, {66, 8888, 10000}, 120000}, {6666, {9999, 120000, 150000}, 180000}}, 7777},\n    {11111,{{22222, {33333, 44444, 55555}, 66666}, {44, {66, 88888, 100000}, 1200000}, {66666, {99999, 1200000, 1500000}, 1800000}}, 77777},\n    {111111,{{222222, {333333, 444444, 555555}, 666666}, {44, {66, 888888, 1000000}, 1200000}, {666666, {999999, 1200000, 1500000}, 1800000}}, 777777},\n    {1111111,{{2222222, {3333333, 4444444, 5555555}, 6666666}, {44, {66, 8888888, 10000000}, 12000000}, {6666666, {9999999, 12000000, 15000000}, 18000000}}, 7777777},\n    {11111111,{{22222222, {33333333, 44444444, 55555555}, 66666666}, {44, {66, 88888888, 100000000}, 120000000}, {66666666, {99999999, 120000000, 150000000}, 180000000}}, 77777777} };\n\nstatic int returnIntSum(int a, int* b)\n{\n  static int static_local_array[1000];\n  return a + *b;\n}\n\nA* structTester(A aStruct, buffer bufferStruct, buffer* bufferStructPtr, int myInt, int* myIntPtr)\n{\n  return 0;\n}\n\nint fooOverload(int over)\n{\n  static char charBuffer[1000];\n  return 100;\n}\n\nint fooOverload(short load, char* ed)\n{\n  static char charBuffer[1000];\n  return 1000;\n}\n\nint main()\n{\n  int localArray15[15];\n  char localString33[33];\n  int localInt = 100;\n  buffer* cur_buffer = 0;\n  printf(\"buffer population[999]: %p\\n\", population);\n  printf(\"buffer multiDimensional[4][5][12]: %p\\n\", multiDimensional);\n\n  cur_buffer = population;\n  strcpy(cur_buffer->firstName, \"123456789\");\n  cur_buffer[3].age = 69;\n  strcpy(cur_buffer->middleName, \"Ricky\");\n  cur_buffer->weight = 155;\n  strcpy(cur_buffer->lastName, \"supercalifragilisticexpialadocious\");\n  cur_buffer->SS = 12121212;\n\n  cur_buffer[0].mallocMePlease = (char*)strdup(\"i just got malloc'ed - 00000!\\n\\n\\t\");\n  cur_buffer[2].mallocMePlease = (char*)strdup(\"i just got malloc'ed - 22222!\\n\\n\\t\");\n  cur_buffer[4].mallocMePlease = (char*)strdup(\"i just got malloc'ed - 44444!\\n\\n\\t\");\n\n  printf(\"%s %d %s %f %s %lu\\n\",\n   population[0].firstName,\n   population[0].age,\n   population[0].middleName,\n   population[0].weight,\n   population[0].lastName,\n   population[0].SS);\n\n  globalInt = 6170;\n  globalIntPtr = (int*)malloc(sizeof(*globalIntPtr));\n  *globalIntPtr = 6111;\n\n  populationPtr = (buffer*)malloc(sizeof(*populationPtr));\n  strcpy(populationPtr->firstName, \"123456789\");\n  populationPtr->age = 69;\n  strcpy(populationPtr->middleName, \"Ricky\");\n  populationPtr->weight = 155.5;\n  strcpy(populationPtr->lastName, \"supercalifragilisticexpialadocious\");\n  populationPtr->SS = 12121212;\n\n  printf(\"%s %d %s %f %s %lu\\n\",\n   populationPtr[0].firstName,\n   populationPtr[0].age,\n   populationPtr[0].middleName,\n   populationPtr[0].weight,\n   populationPtr[0].lastName,\n   populationPtr[0].SS);\n\n  printf(\"%p %p %p %p %p %p\\n\",\n   &(populationPtr[0].firstName),\n   &(populationPtr[0].age),\n   &(populationPtr[0].middleName),\n   &(populationPtr[0].weight),\n   &(populationPtr[0].lastName),\n   &(populationPtr[0].SS));\n\n  // Forces gcc 4.0 to generate a debug info entry for abracadabra:\n  printf(\"abracadabra.social_security[5]: %d\\n\", abracadabra.social_security[5]);\n\n  returnIntSum(250, &localInt);\n\n  return 0;\n}\n", 
  "trace": []
};
