rm fjalar-TrivialTest.vgtrace
var trace = {
  "code": "// From the test suite of https://github.com/codespecs/daikon\n//   daikon/tests/kvasir-tests/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef long long int rhubarbInt64;\ntypedef unsigned long long int UrhubarbInt64;\ntypedef unsigned int* UIntPtr;\n\nchar* globalStr = \"MR FURLEY\\t\\nis a good man\\rhello\\tworld\\t\\n\\n\\n\\\\ \\r \\r a\\r  \\\\b \\\\c\";\n//char* globalStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYV1234567890\";\n//unsigned char* localAAddr;\nint globalInt = 5555;\ndouble globalDouble = 12345.67890123;\nunsigned long long int globalLong = 6969696969696969;\nstatic const int globalWkdayA = 4;\n\ntypedef struct _basicTypesStruct\n{\n  char char_val;\n  unsigned char uchar_val;\n  short short_val;\n  unsigned short ushort_val;\n  int int_val;\n  //  unsigned int uint_val;\n  //  rhubarbInt64 Int64_val;\n  //  UrhubarbInt64 UInt64_val;\n  //  float float_val;\n  //  double double_val;\n  //  float float_val2;\n  //  double double_val2;\n}\nbasicTypesStruct;\n\ntypedef enum weekdays\n{\n  MONDAY,\n  TUESDAY,\n  WEDNESDAY,\n  THURSDAY,\n  FRIDAY,\n  SATURDAY,\n  SUNDAY\n}\nweekdays;\n\ntypedef struct _complexStruct complexStruct;\n\nstruct _complexStruct\n{\n  weekdays day_of_week;\n  //  int*** intArray;\n  basicTypesStruct basic1;\n  complexStruct* next;\n  char*** myString;\n  basicTypesStruct* basic2;\n  complexStruct* prev;\n  int footer;\n};\n/*\nint printHelloWorld(double routebaga, char turnip)\n{\n  printf(\"Hello world %f %c: \", routebaga, turnip);\n  return 0xADDR>= 0) && (day < 7))\n    return (weekdays)day;\n  else\n    return (weekdays)0;\n}\n\ncomplexStruct** cpg;\nconst complexStruct*** initBasicTypesStruct(double a,\n                          int b,\n                          char c,\n                          float d,\n                          basicTypesStruct** bp,\n                          unsigned long long int e,\n                          complexStruct** cp,\n                          short f)\n{\n  unsigned char localA = 69;\n  int uninitB;\n  char** localPtr = &globalStr;\n  int wkdayA = 5;\n  basicTypesStruct localB = {0, 0, 0, 0, 0};\n  cpg = cp;\n  //  printf(\"&localA=%d, &localPtr=%d, &localB=%d\\n\", &localA, &localPtr, &localB);\n  //  localAAddr = &localA; // DON'T DO THIS - Kvasir gets confused by ptrs. to local vars\n  //  printf(\"bp=%d *bp=%d\\n\", bp, *bp);\n  (*bp)->char_val = -42;\n  (*bp)->uchar_val = 42;\n  (*bp)->short_val = -28000;\n  (*bp)->ushort_val = 28000;\n  (*bp)->int_val = 1234567890;\n\n  b = 43210;\n  c = 43;\n  f = 4321;\n\n  //  printf(\"&(cp[]->myString)=%d, cp[]->myString=%d\\n\",\n  //         &((*cp)->myString),\n  //         (*cp)->myString);\n\n  (*cp)->day_of_week = THURSDAY;\n  //  (*cp)->intArray = 69;\n  (*cp)->basic1 = (**bp);\n  (*cp)->myString = &localPtr;\n  (*cp)->basic2 = (*bp);\n  (*cp)->footer = -123456;\n\n  //  printf(\"&localPtr=%d, localPtr=%d, globalStr=%d\\n\",\n  //         &localPtr, localPtr, globalStr);\n\n  //  printf(\"&(cp[]->myString)=%d, cp[]->myString=%d, cp[]->myString[]=%d, cp[]->myString[][]=%s\\n\",\n  //         &((*cp)->myString),\n  //         (*cp)->myString,\n  //         *((*cp)->myString),\n  //         **((*cp)->myString));\n\n\n  //  printf(\"cp[]->basic1.char_val=%d, cp[]->basic2=%d\\n\",\n  //         (*cp)->basic1.char_val,\n  //         (*cp)->basic2);\n  returnWeekday(wkdayA);\n  //  printf(\"bp=%d *bp=%d\\n\", bp, *bp);\n  //  printf(\"&globalInt=%d\\n\", &globalInt);\n  return (const complexStruct***)&cpg;\n}\n\n/*\nbasicTypesStruct readBasicTypesStruct(basicTypesStruct a, basicTypesStruct b, int c, char d, complexStruct e)\n{\n// Attempt to print out stack contents:\n  char* bytePtr = (char*)(&a);\n  int offset;\n  for (offset = 0; offset < 96; offset++)\n    {\n      printf(\"EBP + %d: %p\\n\", (offset + 8), *(bytePtr + offset));\n    }\n  return b;\n}\n*/\n\nbasicTypesStruct readStruct(basicTypesStruct a)\n{\n\n}\n\n/*\ncomplexStruct copyComplexStruct(complexStruct* cp)\n{\n  complexStruct temp;\n  temp = (*cp);\n  return temp;\n}\n*/\n\nint main()\n{\n  double a = 3.1415926;\n  //  int b = 123456789;\n  int b;\n  char c = 96;\n  //  float d = 2.71818;\n  float d;\n  unsigned long long int e = 1234567890123456789;\n  short f = 30000;\n  basicTypesStruct basic = {1, 2, 3, 4, 5};\n  basicTypesStruct* bPtr = &basic;\n  complexStruct complex;\n  complexStruct* cPtr = &complex;\n\n  memset(&complex, 0, sizeof(complex));\n  //  printf(\"&a=%d, &b=%d, &c=%d, &d=%d, &e=%d, &f=%d\\n\", &a, &b, &c, &d, &e, &f);\n  //  printf(\"&&basic=%d, &basic=%d, &&complex=%d, &complex=%d\\n\", &bPtr, bPtr, &cPtr, cPtr);\n  //  printf(\"localAAddr=%d\\n\", localAAddr);\n  initBasicTypesStruct(a, b, c, d, &bPtr, e, &cPtr, f);\n  //  printf(\"localAAddr=%d, *localAAddr=%d\\n\", localAAddr, *localAAddr);\n  //  complexStruct complex;\n  //  basic.char_val = 0xADDR>= 0; r--)\n    {\n      int tempVal = valueAt(intArray, r);\n      weekdays wkday = returnWeekday(r);\n      printf(\"intArray[%d] = %d, weekday = %d\\n\", r, tempVal, wkday);\n    }\n  */\n\n  return 0;\n}\n", 
  "trace": []
};
